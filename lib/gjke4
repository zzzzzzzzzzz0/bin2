模块“工具二库”。

函数集“‘参数0’.so”。

函数“断无意义名”以“is_noname__”、“i-c*”。
函数“多串替换”以“rust_replace__”、“-E-$:-i:0-c*-Z”（src（、c* tag1、c* 代码 / 允许过滤（当tag1空。sp-、0-9、a-z、A-Z、集合）、……））。
函数“多串更换”以“rust_replace__”、“-E-$:-i:1-c*-Z”。（no_code）

函数“串截取”以“rust_strmid__”、“-$:A-c*-Z”（源
	（、i 开始位置，<0倒数。缺省0
	、i 结束位置，<=0倒数。缺省0
	、c* 移过该串长
	、c* 后移过该串长
	、c* 省略号。开始位置<0时也前用））。
函数“多串截取”以“rust_strmmid__”、“-$:A-c*-i-i-Z”（开始位置、结束位置、……）。
函数“串显长”以“sp_len__”、“i-c*-Z”（串（、i限制（-1不）））。

函数“串位置”     以“strpos__”、“l-c*-c*-i:0-Z”（串、搜索的串（、i（起始位置）、c*（移过该串长）、c*（2 返回加上搜串长））。不存在时返回-1）。
函数“串尤位置”   以“strpos__”、“l-c*-c*-i:1-Z”（按utf8计算）。
函数“串倒位置”  以“strrpos__”、“l-c*-c*-i:0-Z”。
函数“串尤倒位置”以“strrpos__”、“l-c*-c*-i:1-Z”。

函数“串包含”  以“strstr__”、“i-c*-i:0-Z”。
函数“串头匹配”以“strstr__”、“i-c*-i:1-Z”。
函数“串尾匹配”以“strstr__”、“i-c*-i:2-Z”。
函数“串整匹配”以“strstr__”、“i-c*-i:3-Z”。
定义头匹配【倒挂】以下代码
	调用‘串‘参数0’’、‘参数1’、‘参数栈【2】’
上代码。
定义尾匹配【倒挂】以下代码
	调用‘串‘参数0’’、‘参数1’、‘参数栈【2】’
上代码。
定义整匹配【倒挂】以下代码
	调用‘串‘参数0’’、‘参数1’、‘参数栈【2】’
上代码。
定义内包含【倒挂】以下代码
	调用‘串包含’、‘参数1’、‘参数栈【2】’
上代码。
函数“串比较”以“strcmp__”、“i-c*-c*-i”。
函数“串相较”以“strcm2__”、“i-c*-c*”（相似）。

函数“去头尾空白”以“rust_trim__”、“-$:A-c*-i:3”。
函数“去头空白”  以“rust_trim__”、“-$:A-c*-i:1”。
函数“去尾空白”  以“rust_trim__”、“-$:A-c*-i:2”。
函数“去头尾”（掐）以“rust_trim2__”、“-$:A-c*-c*-i”（、多个字符而非字）。

函数  “迭代三”以“rust_foreach3__”、“-E-B-$:-i:0-c*-i-Z”。
函数“序迭代三”以“rust_foreach3__”、“-E-B-$:-i:1-c*-i-Z”。
函数  “迭代解”以“rust_foreach3__”、“-E-B-$:-i:0-c*-i:1-Z”。
函数“序迭代解”以“rust_foreach3__”、“-E-B-$:-i:1-c*-i:1-Z”。

函数“迭代路径”  以“rust_for_path__”、“-E-$:-c*-c*-i:2-i:0-i:0-i:1”（、代码（传：目录、级数））。
函数“迭代路径二”以“rust_for_path__”、“-E-$:-c*-c*-i:3-l-l-i:1”（、代码（传：目录、级数、后补）、路径是否可空（0 1 2）、开始级）。
函数“迭代路径三”以“rust_for_path__”、“-E-$:-c*-c*-i:3-l-l-i:0”（反向）。

函数“随机数种”以“srand__”、“-l”（0到65535，-1为以时间）。
函数“随机数”以“rando__”、“l-l-l”（最小值、最大值）。

函数“侦听信号”以“signal__”、“-i”（signum）。
函数“设侦听信号代码”以“signal_cb__”、“-c*”。

函数“建子进程”以“spawn__”、“-B-Z”（……）。

函数“分配共享内存”以“new_shm__”、“-B-c*-i-i”（fname、proj_id 1至255、字节数）。
函数“连接共享内存”以“attach_shm__”、“-B-c*”（id）。
函数“释放共享内存”以“delete_shm__”、“-Z”（c* id……）。
函数“得共享内存”以“get_shm__”、“c*-c*”。
函数“设共享内存”以“set_shm__”、“i-c*-c*-Z”（柄、内容。返回是否成功）。
